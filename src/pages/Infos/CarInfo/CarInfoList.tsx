// src/pages/CarInfo/CarInfoList.tsx
import { Accordion, AccordionSummary, AccordionDetails, Typography, TextField, Select, MenuItem, Button, Box, Chip, Stack, InputLabel, IconButton, Dialog, DialogContent, DialogTitle, Checkbox, FormControlLabel, Autocomplete } from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import SearchIcon from '@mui/icons-material/Search';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import CloseIcon from '@mui/icons-material/Close';
import SaveIcon from '@mui/icons-material/Save';
import CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import DataTable from '../../../components/DataTable';
import { type GridColDef } from '@mui/x-data-grid';
import { useEffect, useMemo, useState } from 'react';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import ChipTag from '../../../components/ChipTag';
import { useDispatch, useSelector } from 'react-redux';
import type { AppDispatch } from '../../../store';
import {
    selectRegions, fetchLprRegions,
    selectVehicleMakes, fetchVehicleMakes,
    selectVehicleColors, fetchVehicleColors,
    selectVehicleGroups, fetchVehicleGroups,
} from '../../../store/slices/masterdataSlice';
import { getVehicleModels, type VehicleModel } from '../../../services/masterdata.service';
import VehicleApi from '../../../services/VehicleApi.service';
import dialog from '../../../services/dialog.service';
import dayjs, { Dayjs } from 'dayjs';
import type { Vehicle, VehicleListFilter } from '../../../services/VehicleApi.service';



// --- Mock Data ---
// const rows = [
//     { id: 1, plate: '‡∏Å‡∏á 6677', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', brand: 'Nissan', model: 'Almera', color: '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô', createDate: '10/10/2568', carGroup: 'Visitor' },
//     { id: 2, plate: '‡∏Å‡∏á 6677', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', brand: 'Nissan', model: 'Almera', color: '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô', createDate: '10/10/2568', carGroup: 'Member' },
//     { id: 3, plate: '‡∏Å‡∏á 6677', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', brand: 'Nissan', model: 'Almera', color: '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô', createDate: '10/10/2568', carGroup: 'Visitor' },
//     { id: 4, plate: '‡∏Å‡∏á 6677', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', brand: 'Nissan', model: 'Almera', color: '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô', createDate: '10/10/2568', carGroup: 'Member' },
//     { id: 5, plate: '‡∏Å‡∏á 6677', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', brand: 'Nissan', model: 'Almera', color: '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô', createDate: '10/10/2568', carGroup: 'Member' },
//     { id: 6, plate: '‡∏Å‡∏á 6677', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', brand: 'Nissan', model: 'Almera', color: '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô', createDate: '10/10/2568', carGroup: 'VIP' },
//     { id: 7, plate: '‡∏Å‡∏á 6677', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', brand: 'Nissan', model: 'Almera', color: '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô', createDate: '10/10/2568', carGroup: 'Member' },
//     { id: 8, plate: '‡∏Å‡∏á 6677', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', brand: 'Nissan', model: 'Almera', color: '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô', createDate: '10/10/2568', carGroup: 'Blacklist' },
// ];

const DEFAULT_CREATOR_UID = '83f04e2b-09c8-40c2-83d2-cafb57742e21';
const DEFAULT_UPDATER_UID = '83f04e2b-09c8-40c2-83d2-cafb57742e21';

const CarInfoList = () => {
    // ====== Search form states (‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô accordion) ======
    const [sPlatePrefix, setSPlatePrefix] = useState<string>('');
    const [sPlateNumber, setSPlateNumber] = useState<string>('');
    const [sRegionCode, setSRegionCode] = useState<string>('');
    const [sVehicleMake, setSVehicleMake] = useState<string>(''); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ text
    const [sVehicleMakeInput, setSVehicleMakeInput] = useState<string>(''); // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° input
    const [sVehicleColorId, setSVehicleColorId] = useState<number | ''>('');
    const [sVehicleGroupId, setSVehicleGroupId] = useState<number | ''>('');
    const [sStartDate, setSStartDate] = useState<Dayjs | null>(null);
    const [sEndDate, setSEndDate] = useState<Dayjs | null>(null);
    const [rowCount, setRowCount] = useState(0);
    const [paginationModel, setPaginationModel] = useState({ page: 0, pageSize: 10 });
    // ‚úÖ state ‡πÄ‡∏Å‡πá‡∏ö filter ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [lastFilter, setLastFilter] = useState<VehicleListFilter>({});

    const [rows, setRows] = useState<Vehicle[]>([]);

    const [isCarFormOpen, setIsCarFormOpen] = useState(false);
    const handleOpenCarForm = () => setIsCarFormOpen(true);
    const handleCloseCarForm = () => {
        resetForm();
        setIsCarFormOpen(false);
    };

    const dispatch = useDispatch<AppDispatch>();

    // üîπ ‡πÉ‡∏ä‡πâ selectors
    const regions = useSelector(selectRegions);
    const makes = useSelector(selectVehicleMakes);
    const colors = useSelector(selectVehicleColors);
    const groups = useSelector(selectVehicleGroups);

    // üîπ ‡πÇ‡∏´‡∏•‡∏î master data ‡∏ï‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ page
    useEffect(() => {
        dispatch(fetchLprRegions());
        dispatch(fetchVehicleMakes());
        dispatch(fetchVehicleColors());
        dispatch(fetchVehicleGroups());
    }, [dispatch]);


    // =========================
    // Dialog Form State
    // =========================
    // ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    const [platePrefix, setPlatePrefix] = useState<string>(''); // ‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏±‡∏Å‡∏©‡∏£
    const [plateNumber, setPlateNumber] = useState<string>(''); // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    // ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (payload ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô region_code: string)
    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô regions ‡πÑ‡∏°‡πà‡∏°‡∏µ code ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö name_th ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠ map ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á
    const [regionCode, setRegionCode] = useState<string>('');

    // ‚úÖ ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠/‡∏£‡∏∏‡πà‡∏ô: ‡πÉ‡∏ä‡πâ Autocomplete ‡πÅ‡∏ï‡πà "‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
    const [vehicleMakeText, setVehicleMakeText] = useState<string>('');   // ‡πÄ‡∏Å‡πá‡∏ö string
    const [vehicleModelText, setVehicleModelText] = useState<string>(''); // ‡πÄ‡∏Å‡πá‡∏ö string

    // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ENG + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏´‡πâ‡∏≤‡∏° space/‡∏û‡∏¥‡πÄ‡∏®‡∏©)
    const ALNUM = /^[A-Za-z0-9]+$/;
    const sanitizeAlnum = (s: string) => s.replace(/[^A-Za-z0-9]/g, '');

    const allowKeys = new Set([
        'Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown',
        'Home', 'End', 'Tab', 'Enter'
    ]);

    // error states
    const [makeError, setMakeError] = useState<string>('');
    const [modelError, setModelError] = useState<string>('');

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á Autocomplete (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å value)
    const [makeInput, setMakeInput] = useState<string>('');
    const [modelInput, setModelInput] = useState<string>('');

    // ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ makeId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á models ‡∏ï‡∏≤‡∏°‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
    const [selectedMakeId, setSelectedMakeId] = useState<number | null>(null);

    // ‡∏™‡∏µ / ‡∏Å‡∏•‡∏∏‡πà‡∏° (id)
    const [vehicleColorId, setVehicleColorId] = useState<number | ''>('');
    const [vehicleGroupId, setVehicleGroupId] = useState<number | ''>('');

    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const [active, setActive] = useState<boolean>(true);     // Checkbox ‡πÉ‡∏ô UI ‡πÄ‡∏õ‡πá‡∏ô "Inactive" ‚Üí map ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô active
    const [visible] = useState<boolean>(true);               // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ toggle ‡πÄ‡∏û‡∏¥‡πà‡∏° UI ‡πÑ‡∏î‡πâ

    // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
    const [notes, setNotes] = useState<string>('');

    // ‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏¢‡πÜ ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ)
    const [creatorUid] = useState<string>(DEFAULT_CREATOR_UID);
    const [updaterUid] = useState<string>(DEFAULT_UPDATER_UID);

    // =========================
    // ‡πÇ‡∏´‡∏•‡∏î models ‡∏ï‡∏≤‡∏° selectedMakeId (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á Redux)
    // =========================
    const [models, setModels] = useState<VehicleModel[]>([]);
    const [modelsLoading, setModelsLoading] = useState(false);
    const [modelsError, setModelsError] = useState<string | null>(null);

    const [platePrefixError, setPlatePrefixError] = useState<string>('');
    const [plateNumberError, setPlateNumberError] = useState<string>('');
    const [regionError, setRegionError] = useState<string>('');
    const [colorError, setColorError] = useState<string>('');
    const [groupError, setGroupError] = useState<string>('');

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const fetchData = async (page: number, pageSize: number, filter: VehicleListFilter) => {
        try {
            const res = await VehicleApi.list(
                page + 1, // API ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å 1
                pageSize,
                'uid.asc',
                filter
            );
            if (res.success) {
                setRows(res.data);
                setRowCount(res.pagination?.countAll ?? 0);
                console.log('‚úÖ list:', res.data, res.pagination);
            } else {
                console.error('‚ö†Ô∏è list failed:', res.message);
            }
        } catch (err: any) {
            console.error('‚ùå API error:', err.message || err);
        }
    };

    useEffect(() => {
        if (!selectedMakeId) {
            setModels([]);
            return;
        }
        (async () => {
            setModelsLoading(true);
            setModelsError(null);
            try {
                const res = await getVehicleModels(Number(selectedMakeId), 1000);
                setModels(res.data ?? []);
            } catch (e: any) {
                setModelsError(e?.message || '‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            } finally {
                setModelsLoading(false);
            }
        })();
    }, [selectedMakeId]);



    // options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Autocomplete
    const makeOptions = useMemo(
        () =>
            makes.map(m => ({
                id: m.id as number,
                label: m.make_en as string, // ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            })),
        [makes]
    );

    const modelOptions = useMemo(
        () =>
            models.map(md => ({
                id: md.id as number,
                label: md.model_en || md.model || '', // ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ
            })),
        [models]
    );
    // options ‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
    const searchMakeOptions = useMemo(
        () =>
            makes.map(m => ({
                id: m.id as number,
                label: m.make_en as string, // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÇ‡∏ä‡∏ß‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏Å‡πá‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô m.make_th
            })),
        [makes]
    );

    //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô validate ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const validateRequired = () => {
        let ok = true;

        // ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        if (!platePrefix.trim()) { setPlatePrefixError('‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏±‡∏Å‡∏©‡∏£'); ok = false; } else setPlatePrefixError('');
        if (!plateNumber.trim()) { setPlateNumberError('‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô'); ok = false; } else setPlateNumberError('');

        // ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
        if (!regionCode) { setRegionError('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î'); ok = false; } else setRegionError('');

        // ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠/‡∏£‡∏∏‡πà‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ENG+‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á) ‚Äî ‡πÉ‡∏ä‡πâ makeError/modelError ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏£‡πà‡∏ß‡∏°‡∏î‡πâ‡∏ß‡∏¢
        if (!vehicleMakeText || !ALNUM.test(vehicleMakeText)) {
            setMakeError('‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô A-Z/0-9 ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á');
            ok = false;
        }
        if (!vehicleModelText || !ALNUM.test(vehicleModelText)) {
            setModelError('‡∏£‡∏∏‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô A-Z/0-9 ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á');
            ok = false;
        }

        // ‡∏™‡∏µ
        if (vehicleColorId === '') { setColorError('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ'); ok = false; } else setColorError('');

        // ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏ñ
        if (vehicleGroupId === '') { setGroupError('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏ñ'); ok = false; } else setGroupError('');

        return ok;
    };

    // =========================
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Ñ
    // =========================
    const handleSubmit = async () => {
        if (!validateRequired()) return; // ‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        dialog.loading();
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å UI ‡πÄ‡∏õ‡πá‡∏ô payload
        const payload = {
            uid: '', // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á), ‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡πà‡∏á
            plate_prefix: platePrefix || '',
            plate_number: plateNumber || '',
            region_code: regionCode || '', // NOTE: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ code ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ code ‡∏ô‡∏±‡πâ‡∏ô
            vehicle_make: vehicleMakeText || '',   // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            vehicle_model: vehicleModelText || '', // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            vehicle_color_id: vehicleColorId === '' ? null : Number(vehicleColorId),
            active: active,     // true = ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
            visible: visible,   // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô toggle ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° UI
            notes: notes || '',
            vehicle_group_id: vehicleGroupId === '' ? null : Number(vehicleGroupId),
            creator_uid: creatorUid,
            updater_uid: updaterUid,
        };

        try {

            const res = await VehicleApi.create(payload);
            if (res.success) {
                dialog.success('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
                resetForm();
                setIsCarFormOpen(false);
            } else {
                console.error('‚ö†Ô∏è Create failed:', res.message);
                dialog.close();
            }
        } catch (err: any) {
            dialog.close();
            console.error('‚ùå API error:', err.message || err);
        }

        // ‡∏õ‡∏¥‡∏î dialog ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        resetForm();
        handleCloseCarForm();
    };


    const handleKeyDownAlnum: React.KeyboardEventHandler<HTMLInputElement> = (e) => {
        // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        if (allowKeys.has(e.key)) return;
        // ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ space ‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà [A-Za-z0-9]
        if (e.key === ' ' || !/^[A-Za-z0-9]$/.test(e.key)) {
            e.preventDefault();
        }
    };

    const handlePasteAlnum: React.ClipboardEventHandler<HTMLInputElement> = (e) => {
        const text = e.clipboardData.getData('text');
        if (!ALNUM.test(text)) {
            e.preventDefault(); // ‡∏Å‡∏±‡∏ô paste ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á pattern
        }
    };
    const resetForm = () => {
        setPlatePrefix('');
        setPlateNumber('');
        setRegionCode('');
        setVehicleMakeText('');
        setVehicleModelText('');
        setMakeInput('');
        setModelInput('');
        setVehicleColorId('');
        setVehicleGroupId('');
        setActive(true);
        setNotes('');

        // clear error states
        setPlatePrefixError('');
        setPlateNumberError('');
        setRegionError('');
        setMakeError('');
        setModelError('');
        setColorError('');
        setGroupError('');
    };

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å search
    // ‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‚Üí reset pagination + ‡∏¢‡∏¥‡∏á API
    const handleSearch = () => {
        const filter = buildVehicleFilter();
        setLastFilter(filter);
        const newPagination = { page: 0, pageSize: paginationModel.pageSize };
        setPaginationModel(newPagination);
        fetchData(newPagination.page, newPagination.pageSize, filter); // ‚¨ÖÔ∏è ‡∏¢‡∏¥‡∏á API
    };

    // ‚úÖ pagination ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‚Üí ‡∏¢‡∏¥‡∏á API
    const handlePaginationChange = (model: { page: number; pageSize: number }) => {
        setPaginationModel(model);
        fetchData(model.page, model.pageSize, lastFilter); // ‚¨ÖÔ∏è ‡∏¢‡∏¥‡∏á API
    };

    // helper: ‡∏™‡∏£‡πâ‡∏≤‡∏á filter object ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ key ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
    const buildVehicleFilter = (): VehicleListFilter => {
        const filter: VehicleListFilter = {};
        if (sPlatePrefix) filter.plate_prefix = sPlatePrefix.trim();
        if (sPlateNumber) filter.plate_number = sPlateNumber.trim();
        if (sRegionCode) filter.region_code = sRegionCode;

        if (sVehicleMake) filter.vehicle_make = sVehicleMake.trim();
        if (sVehicleColorId !== '' && sVehicleColorId !== null) filter.vehicle_color_id = Number(sVehicleColorId);
        if (sVehicleGroupId !== '' && sVehicleGroupId !== null) filter.vehicle_group_id = Number(sVehicleGroupId);

        // created_at range: startOf day / endOf day
        if (sStartDate) filter.created_at_gte = sStartDate.startOf('day').toISOString();
        if (sEndDate) filter.created_at_lte = sEndDate.endOf('day').toISOString();

        return filter;
    };

    // --- Table Columns Definition ---
    const columns: GridColDef[] = [
        {
            field: 'rownumb',
            headerName: '‡∏•‡∏≥‡∏î‡∏±‡∏ö',
            width: 80,
            align: 'center',
            headerAlign: 'center',
            sortable: false,
            filterable: false,
            renderCell: (params) => {
                const rowIndex = params.api.getRowIndexRelativeToVisibleRows(params.id);
                const pagination = params.api.state.pagination.paginationModel;
                return (
                    <span>
                        {pagination.page * pagination.pageSize + rowIndex + 1}
                    </span>
                );
            },
        },
        {
            field: 'plate', headerName: '‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ', flex: 1, minWidth: 150, headerAlign: 'center', align: 'center',
            renderCell: (params) => (
                <div className='w-full h-full flex justify-center items-center'>
                    <Typography variant='body2'>{params.row.plate_prefix}{params.row.plate_number}</Typography>
                </div>
            )
        },
        {
            field: 'province', headerName: '‡∏´‡∏°‡∏ß‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', flex: 1, minWidth: 150, headerAlign: 'center', align: 'center',
            renderCell: (params) => (
                <div className='w-full h-full flex justify-center items-center'>
                    <Typography variant='caption'>{params.row.region ? params.row.region.name_th : '-'}</Typography>
                </div>
            )
        },
        { field: 'vehicle_make', headerName: '‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠', flex: 1, minWidth: 120, headerAlign: 'center', align: 'center' },
        { field: 'vehicle_model', headerName: '‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ', flex: 1, minWidth: 120, headerAlign: 'center', align: 'center' },
        {
            field: 'vehicle_color_id', headerName: '‡∏™‡∏µ', flex: 1, minWidth: 120, headerAlign: 'center', align: 'center',
            renderCell: (params) => (
                <div className='w-full h-full flex justify-center items-center'>
                    <Typography variant='caption'>{params.row.vehicle_color.color_th ?? '-'}</Typography>
                </div>
            )
        },
        { field: 'createDate', headerName: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á', flex: 1, minWidth: 150, headerAlign: 'center', align: 'center' },
        {
            field: 'group',
            headerName: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏ñ',
            flex: 1,
            minWidth: 150,
            headerAlign: 'center',
            align: 'center',
            renderCell: (params) => (
                <div className='w-full h-full flex justify-center items-center'>
                    <ChipTag tag={params.row.vehicle_group.name_en ?? '-'} />
                </div>
            )
        },
        {
            field: 'actions',
            headerName: '',
            width: 100,
            sortable: false,
            align: 'center',
            renderCell: () => (
                <div className='flex w-full h-full items-center justify-center gap-1'>
                    <IconButton size="small"><EditIcon fontSize="small" /></IconButton>
                    <IconButton size="small"><DeleteIcon fontSize="small" /></IconButton>
                </div>
            )
        }
    ];

    return (
        <Box>
            <Typography variant="h5" sx={{ mb: 2, fontWeight: 'bold' }} className='text-primary-dark'>
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ
            </Typography>
            {/* The page title is now in the Navbar, so we can remove it from here */}
            <Accordion defaultExpanded>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />
                    <Typography>Search</Typography>
                </AccordionSummary>
                <AccordionDetails sx={{ bgcolor: 'white' }}>
                    <div className="flex flex-col gap-4">
                        <div className="flex flex-wrap -m-2">
                            {/* ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô */}
                            <div className="w-full flex sm:w-1/2 md:w-1/5">
                                <div className="w-full sm:w-1/3 md:w-1/3 p-2">
                                    <InputLabel shrink>‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</InputLabel>
                                    <TextField
                                        placeholder="‡∏Å‡∏á"
                                        value={sPlatePrefix}
                                        onChange={(e) => setSPlatePrefix(e.target.value)}
                                    />
                                </div>
                                <div className="w-full sm:w-2/3 md:w-2/3 p-2">
                                    <InputLabel shrink>&nbsp;</InputLabel>
                                    <TextField
                                        placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
                                        value={sPlateNumber}
                                        onChange={(e) => setSPlateNumber(e.target.value)}
                                    />
                                </div>
                            </div>
                            {/* ‡∏´‡∏°‡∏ß‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î */}
                            <div className="w-full sm:w-1/2 md:w-1/5 p-2">
                                <InputLabel shrink>‡∏´‡∏°‡∏ß‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</InputLabel>
                                <Select
                                    value={sRegionCode}
                                    onChange={(e) => setSRegionCode(e.target.value as string)}
                                    displayEmpty
                                >
                                    <MenuItem value=""><em>‡∏ó‡∏∏‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</em></MenuItem>
                                    {regions.map(r => (
                                        <MenuItem key={r.id} value={r.region_code}>{r.name_th}</MenuItem>
                                    ))}
                                </Select>
                            </div>

                            {/* ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ */}
                            <div className="w-full sm:w-1/2 md:w-1/5 p-2">
                                <InputLabel shrink>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠</InputLabel>
                                <Autocomplete
                                    options={searchMakeOptions}
                                    value={
                                        sVehicleMake
                                            ? searchMakeOptions.find(o => o.label === sVehicleMake) ?? { id: 0, label: sVehicleMake }
                                            : null
                                    }
                                    inputValue={sVehicleMakeInput}
                                    onInputChange={(_, newInput) => {
                                        setSVehicleMakeInput(newInput);
                                        setSVehicleMake(newInput); // ‡πÄ‡∏Å‡πá‡∏ö text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö filter
                                    }}
                                    onChange={(_, newValue) => {
                                        const label = typeof newValue === 'string'
                                            ? newValue
                                            : (newValue?.label ?? '');
                                        setSVehicleMake(label);
                                        setSVehicleMakeInput(label);
                                    }}
                                    renderInput={(params) => (
                                        <TextField
                                            {...params}
                                            placeholder="‡πÄ‡∏ä‡πà‡∏ô TOYOTA, HONDA"
                                        />
                                    )}
                                    getOptionLabel={(o) => (typeof o === 'string' ? o : o?.label ?? '')}
                                    isOptionEqualToValue={(a, b) => a.id === b.id}
                                />
                            </div>
                            {/* ‡∏™‡∏µ */}
                            <div className="w-full sm:w-1/2 md:w-1/5 p-2">
                                <InputLabel shrink>‡∏™‡∏µ</InputLabel>
                                <Select
                                    value={sVehicleColorId}
                                    onChange={(e) => setSVehicleColorId(e.target.value as unknown as number | '')}
                                    displayEmpty
                                >
                                    <MenuItem value=""><em>‡∏ó‡∏∏‡∏Å‡∏™‡∏µ</em></MenuItem>
                                    {colors.map(c => (
                                        <MenuItem key={c.id} value={c.id}>{c.color_th}</MenuItem>
                                    ))}
                                </Select>
                            </div>
                            {/* ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏ñ */}
                            <div className="w-full sm:w-1/2 md:w-1/5 p-2">
                                <InputLabel shrink>‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏ñ</InputLabel>
                                <Select
                                    value={sVehicleGroupId}
                                    onChange={(e) => setSVehicleGroupId(e.target.value as unknown as number | '')}
                                    displayEmpty
                                >
                                    <MenuItem value=""><em>‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</em></MenuItem>
                                    {groups.map(g => (
                                        <MenuItem key={g.id} value={g.id}>{g.name_th}</MenuItem>
                                    ))}
                                </Select>
                            </div>
                            {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                            <div className="w-full sm:w-1/2 md:w-1/5 p-2">
                                <InputLabel shrink>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)</InputLabel>
                                <DatePicker value={sStartDate} onChange={setSStartDate} />
                            </div>
                            <div className="w-full sm:w-1/2 md:w-1/5 p-2">
                                <InputLabel shrink>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î)</InputLabel>
                                <DatePicker value={sEndDate} onChange={setSEndDate} />
                            </div>
                        </div>
                        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
                        <div className="w-full flex justify-end p-2">
                            <Button
                                variant="contained"
                                startIcon={<SearchIcon />}
                                className='!bg-primary hover:!bg-primary-dark'
                                onClick={handleSearch}
                            >
                                ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                            </Button>
                        </div>
                    </div>
                </AccordionDetails>
            </Accordion>

            <Stack direction="row" spacing={1} sx={{ my: 2 }}>
                <Button variant="contained" size="small" startIcon={<AddIcon />} className='!bg-gold hover:!bg-gold-dark' onClick={handleOpenCarForm}>‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ</Button>
                <Button variant="outlined" className='!border-gold !text-primary' size="small" startIcon={<img src='/icons/txt-file.png' />}>TXT</Button>
                <Button variant="outlined" className='!border-gold !text-primary' size="small" startIcon={<img src='/icons/xls-file.png' />}>XLS</Button>
                <Button variant="outlined" className='!border-gold !text-primary' size="small" startIcon={<img src='/icons/csv-file.png' />}>CSV</Button>
                <Box sx={{ flexGrow: 1 }} />
                <Typography variant="body2" sx={{ alignSelf: 'center' }}>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ : 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</Typography>
            </Stack>

            <DataTable
                getRowId={(row) => row.uid}
                rows={rows}
                columns={columns}
                paginationModel={paginationModel}
                rowCount={rowCount}
                // onPaginationModelChange={(model) => {
                //     setPaginationModel(model); // ‡πÄ‡∏Å‡πá‡∏ö state
                //     console.log('üëâ page:', model.page, 'limit:', model.pageSize);
                //     // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏¢‡∏¥‡∏á API
                //     // loadData(model.page + 1, model.pageSize);
                // }}
                onPaginationModelChange={handlePaginationChange}
            />

            {/* --- JSX for the Add/Edit Car Popup --- */}
            <Dialog open={isCarFormOpen} onClose={handleCloseCarForm} fullWidth maxWidth="lg" sx={{ gap: 0 }}>
                <DialogTitle sx={{ padding: 0 }}>
                    <div className='w-full h-[60px] flex '>
                        <div className=' flex w-[55%] h-full bg-primary text-white items-center ps-6'>
                            <Typography variant='h5' >‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ</Typography>
                        </div>
                        <div className='w-[45%]  flex justify-end p-1'>
                            <IconButton size='small' className='h-[30px]' onClick={handleCloseCarForm}> <CancelOutlinedIcon /> </IconButton>

                        </div>
                    </div>

                </DialogTitle>
                <DialogContent dividers sx={{ bgcolor: '#000000', padding: 0, borderTop: 0 }}>
                    <div className="flex flex-wrap lg:flex-nowrap  ">
                        {/* Left Column */}
                        <div className="w-full lg:w-[55%] flex flex-col gap-6 bg-primary p-4 ">
                            <div className='flex gap-2'>
                                <div className='w-1/2'>
                                    <InputLabel required shrink className='!text-white'>‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</InputLabel>
                                    <div className="flex gap-2">
                                        <TextField
                                            placeholder="‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏±‡∏Å‡∏©‡∏£"
                                            value={platePrefix}
                                            onChange={(e) => setPlatePrefix(e.target.value)}
                                            error={!!platePrefixError}
                                            helperText={platePrefixError || '‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏á / ‡∏ú‡∏Å / ‡∏Ü‡∏¢'}
                                        />
                                        <TextField
                                            placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
                                            value={plateNumber}
                                            onChange={(e) => setPlateNumber(e.target.value)}
                                            error={!!plateNumberError}
                                            helperText={plateNumberError}
                                        />
                                    </div>
                                </div>
                                <div className='w-1/2'>
                                    <InputLabel required shrink className='!text-white'>‡∏´‡∏°‡∏ß‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î *</InputLabel>
                                    <Select
                                        value={regionCode}
                                        onChange={(e) => setRegionCode(e.target.value as string)}
                                        displayEmpty
                                        error={!!regionError}
                                    >
                                        <MenuItem value=""><em>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</em></MenuItem>
                                        {regions.map(r => (
                                            // NOTE: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ r.code ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô value ‡πÄ‡∏õ‡πá‡∏ô r.code
                                            <MenuItem key={r.id} value={r.region_code}>{r.name_th}</MenuItem>
                                        ))}
                                    </Select>
                                    {regionError && <Typography variant="caption" color="error">{regionError}</Typography>}
                                </div>
                            </div>
                            {/* ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ (Autocomplete, ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô text) + ‡∏£‡∏∏‡πà‡∏ô (Autocomplete, ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô text) */}
                            <div className='flex gap-2'>
                                <div className='w-1/2'>
                                    <InputLabel required shrink className='!text-white'>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠</InputLabel>
                                    <Autocomplete
                                        // freeSolo
                                        options={makeOptions}
                                        value={
                                            vehicleMakeText
                                                ? makeOptions.find(o => o.label === vehicleMakeText) ?? { id: 0, label: vehicleMakeText }
                                                : null
                                        }
                                        inputValue={makeInput}
                                        onInputChange={(_, newInput) => {
                                            const sanitized = sanitizeAlnum(newInput).toUpperCase();
                                            setMakeInput(sanitized);
                                            setVehicleMakeText(sanitized);
                                            // validate live
                                            if (sanitized.length === 0) {
                                                setMakeError('‡∏Å‡∏£‡∏≠‡∏Å A-Z/0-9 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á)');
                                            } else if (!ALNUM.test(sanitized)) {
                                                setMakeError('‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ A-Z/0-9 (‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ/‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©)');
                                            } else {
                                                setMakeError('');
                                            }
                                        }}
                                        onChange={(_, newValue) => {
                                            const label = typeof newValue === 'string'
                                                ? newValue
                                                : (newValue?.label ?? '');
                                            const sanitized = sanitizeAlnum(label);
                                            setVehicleMakeText(sanitized);
                                            setMakeInput(sanitized);
                                            setMakeError(sanitized && ALNUM.test(sanitized) ? '' : '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ A-Z/0-9');
                                            // map make ‚Üí id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∏‡πà‡∏ô
                                            const id = typeof newValue === 'object' && newValue ? (newValue as any).id : null;
                                            setSelectedMakeId(id ?? null);
                                            setVehicleModelText('');
                                            setModelInput('');
                                            setModelError('');
                                        }}
                                        renderInput={(params) => (
                                            <TextField
                                                {...params}
                                                placeholder="‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ (ENG/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"
                                                error={!!makeError}
                                                helperText={makeError || '‡πÄ‡∏ä‡πà‡∏ô TOYOTA, HONDA, FORD'}
                                                onKeyDown={handleKeyDownAlnum}
                                                onPaste={handlePasteAlnum}
                                                inputProps={{
                                                    ...params.inputProps,
                                                    inputMode: 'text',      // ‚úÖ ‡πÅ‡∏ó‡∏ô 'latin'
                                                    autoCapitalize: 'none', // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                                                    autoCorrect: 'off',     // ‡∏Å‡∏±‡∏ô auto-correct ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
                                                    spellCheck: 'false',    // ‡∏Å‡∏±‡∏ô spellcheck ‡πÉ‡∏ï‡πâ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏î‡∏á
                                                }}
                                            />
                                        )}
                                        getOptionLabel={(o) => (typeof o === 'string' ? o : o?.label ?? '')}
                                        isOptionEqualToValue={(a, b) => a.id === b.id}
                                    />
                                </div>

                                <div className='w-1/2'>
                                    <InputLabel required shrink className='!text-white'>‡∏£‡∏∏‡πà‡∏ô</InputLabel>
                                    <Autocomplete
                                        // freeSolo
                                        options={modelOptions}
                                        disabled={!vehicleMakeText}
                                        value={
                                            vehicleModelText
                                                ? modelOptions.find(o => o.label === vehicleModelText) ?? { id: 0, label: vehicleModelText }
                                                : null
                                        }
                                        inputValue={modelInput}
                                        onInputChange={(_, newInput) => {
                                            const sanitized = sanitizeAlnum(newInput).toUpperCase();

                                            setModelInput(sanitized);
                                            setVehicleModelText(sanitized);
                                            if (sanitized.length === 0) {
                                                setModelError('‡∏Å‡∏£‡∏≠‡∏Å A-Z/0-9 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á)');
                                            } else if (!ALNUM.test(sanitized)) {
                                                setModelError('‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ A-Z/0-9 (‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ/‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©)');
                                            } else {
                                                setModelError('');
                                            }
                                        }}
                                        onChange={(_, newValue) => {
                                            const label = typeof newValue === 'string'
                                                ? newValue
                                                : (newValue?.label ?? '');
                                            const sanitized = sanitizeAlnum(label);
                                            setVehicleModelText(sanitized);
                                            setModelInput(sanitized);
                                            setModelError(sanitized && ALNUM.test(sanitized) ? '' : '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ A-Z/0-9');
                                        }}
                                        renderInput={(params) => (
                                            <TextField
                                                {...params}
                                                placeholder={modelsLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...' : '‡∏£‡∏∏‡πà‡∏ô (ENG/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)'}
                                                error={!!modelError}
                                                helperText={modelError || (modelsError ? '‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∏‡πà‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡πÄ‡∏ä‡πà‡∏ô CIVIC, COROLLA, X5')}
                                                onKeyDown={handleKeyDownAlnum}
                                                onPaste={handlePasteAlnum}
                                                inputProps={{
                                                    ...params.inputProps,
                                                    inputMode: 'text',      // ‚úÖ ‡πÅ‡∏ó‡∏ô 'latin'
                                                    autoCapitalize: 'none', // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                                                    autoCorrect: 'off',     // ‡∏Å‡∏±‡∏ô auto-correct ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
                                                    spellCheck: 'false',    // ‡∏Å‡∏±‡∏ô spellcheck ‡πÉ‡∏ï‡πâ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏î‡∏á
                                                }}
                                            />
                                        )}
                                        getOptionLabel={(o) => (typeof o === 'string' ? o : o?.label ?? '')}
                                        isOptionEqualToValue={(a, b) => a.id === b.id}
                                    />
                                </div>
                            </div>

                            {/* ‡∏™‡∏µ + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
                            <div className='flex gap-2'>
                                <div className='w-1/2'>
                                    <InputLabel required shrink className='!text-white'>‡∏™‡∏µ</InputLabel>
                                    <Select
                                        value={vehicleColorId}
                                        onChange={(e) => setVehicleColorId(e.target.value as unknown as number | '')}
                                        displayEmpty
                                        error={!!colorError}
                                    >
                                        <MenuItem value=""><em>‡∏ó‡∏∏‡∏Å‡∏™‡∏µ</em></MenuItem>
                                        {colors.map(c => (
                                            <MenuItem key={c.id} value={c.id}>{c.color_th}</MenuItem>
                                        ))}
                                    </Select>
                                    {colorError && <Typography variant="caption" color="error">{colorError}</Typography>}
                                </div>

                                <div className='w-1/2 pt-5'>
                                    {/* Checkbox ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô "Inactive" ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞ map ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô active */}
                                    <FormControlLabel
                                        control={
                                            <Checkbox
                                                checked={!active}
                                                onChange={(e) => setActive(!e.target.checked)}
                                                sx={{ color: 'white', '&.Mui-checked': { color: 'white' } }}
                                            />
                                        }
                                        label={<Typography sx={{ color: 'white' }}>Inactive</Typography>}
                                    />
                                </div>
                            </div>

                            {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
                            <div>
                                <InputLabel shrink className='!text-white'>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</InputLabel>
                                <TextField
                                    multiline
                                    rows={4}
                                    value={notes}
                                    onChange={(e) => setNotes(e.target.value)}
                                />
                            </div>
                        </div>

                        {/* Right Column */}
                        <div className="w-full lg:w-[45%] flex flex-col gap-4  bg-white p-4">
                            <div className='card border-[1px]'>
                                <InputLabel required shrink>‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏ñ</InputLabel>
                                <Select
                                    value={vehicleGroupId}
                                    onChange={(e) => setVehicleGroupId(e.target.value as unknown as number | '')}
                                    displayEmpty
                                    error={!!groupError}
                                >
                                    <MenuItem value=""><em>‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</em></MenuItem>
                                    {groups.map(g => (
                                        <MenuItem key={g.id} value={g.id}>{g.name_th}</MenuItem>
                                    ))}
                                </Select>
                                {groupError && <Typography variant="caption" color="error">{groupError}</Typography>}
                            </div>
                            {/* Record Details */}
                            <div>
                                <Typography variant="subtitle2" sx={{ mb: 2 }}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Typography>
                                <div className='flex flex-col w-full gap-5'>
                                    <div className='flex gap-3'>
                                        <div className="flex flex-col items-start gap-1 w-1/2">
                                            <InputLabel shrink sx={{ width: '120px' }}>‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</InputLabel>
                                            <TextField disabled fullWidth />
                                        </div>
                                        <div className="flex flex-col items-start gap-1 w-1/2">
                                            <InputLabel shrink sx={{ width: '120px' }}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</InputLabel>
                                            <DateTimePicker disabled />
                                        </div>
                                    </div>
                                    <div className='flex  gap-3'>
                                        <div className="flex flex-col items-start gap-1 w-1/2">
                                            <InputLabel shrink sx={{ width: '120px' }}>‡∏ú‡∏π‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</InputLabel>
                                            <TextField disabled fullWidth />
                                        </div>
                                        <div className="flex flex-col items-start gap-1 w-1/2">
                                            <InputLabel shrink sx={{ width: '120px' }}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</InputLabel>
                                            <DateTimePicker disabled />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div className='flex w-full justify-end gap-3 py-5 border-t-primary-dark border-t-[1px] mt-3'>

                                <Button
                                    variant="outlined"
                                    className='!border-primary !text-primary'
                                    onClick={handleCloseCarForm}
                                    startIcon={<CloseIcon />}
                                >
                                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </Button>
                                <Button
                                    variant="contained"
                                    onClick={handleSubmit}
                                    startIcon={<SaveIcon />}
                                    className="!bg-primary hover:!bg-primary-dark"
                                >
                                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                </Button>

                            </div>
                        </div>
                    </div>
                </DialogContent>

            </Dialog >
        </Box >
    );
};

export default CarInfoList;